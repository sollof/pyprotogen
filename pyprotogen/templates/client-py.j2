from grpc.aio import insecure_channel, secure_channel, Channel
from grpc import ssl_channel_credentials
from grpc_prometheus_metrics.aio.prometheus_aio_client_interceptor import PromAioUnaryUnaryClientInterceptor
from opentelemetry.instrumentation.grpc import aio_client_interceptors

from {{ package_name }}.interceptors.client_logging import LoggingClientInterceptor
from {{ package_name }}.interceptors.metadata import MetadataClientInterceptor


def get_channel(
    host: str,
    client_name: str | None = None,
    cert: str | None = None,
    cert_path: str | None = None,
    enable_metrics: bool = True,
    enable_logging: bool = True,
    enable_opentelemetry: bool = False,
) -> Channel:
    interceptors = []
    if enable_opentelemetry:
        interceptors = aio_client_interceptors()
    if enable_metrics:
        prom = PromAioUnaryUnaryClientInterceptor(enable_client_handling_time_histogram=True)
        interceptors.append(prom)
    if enable_logging:
        log = LoggingClientInterceptor()
        interceptors.append(log)
    if client_name is not None:
        metadata = MetadataClientInterceptor(client_name=client_name)
        interceptors.append(metadata)
    if cert or cert_path:
        if cert is None and cert_path is not None:
            with open(cert_path, 'rt') as f:
                cert = f.read()
        creds = ssl_channel_credentials(cert.encode())
        ch = secure_channel(host, credentials=creds, interceptors=interceptors)
    else:
        ch = insecure_channel(host, interceptors=interceptors)
    return ch
